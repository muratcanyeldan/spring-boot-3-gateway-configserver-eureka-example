services:
  mysql:
    image: 'mysql:latest'
    container_name: mysql-inventory
    restart: on-failure
    ports:
      - '3306:3306'
    environment:
      MYSQL_DATABASE: inventory
      MYSQL_USER: muratcan
      MYSQL_PASSWORD: yeldan
      MYSQL_ROOT_PASSWORD: yeldan
    command: --character-set-server=utf8 --collation-server=utf8_general_ci
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "muratcan", "-pyeldan"]
      interval: 10s
      timeout: 5s
      retries: 5

  jenkins:
    image: 'jenkins/jenkins:latest'
    container_name: jenkins
    network_mode: bridge
    restart: on-failure
    ports:
      - '8080:8080'
      - '50000:50000'
    volumes:
      - ./jenkins:/var/jenkins_home
      - /var/run/docker.sock.raw:/var/run/docker.sock
      - ~/.m2:/root/.m2
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      - JENKINS_LANG=en_US.UTF-8

  config_server:
    build:
      context: ./ConfigServer
      dockerfile: Dockerfile
    container_name: configserver
    restart: on-failure
    ports:
      - '8088:8088'
    networks:
      - microservice-network

  eureka:
    build:
      context: ./EurekaServer
      dockerfile: Dockerfile
    container_name: eureka
    restart: on-failure
    ports:
      - '8761:8761'
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservice-network

  cloudgateway:
    build:
      context: ./CloudGateway
      dockerfile: Dockerfile
    container_name: cloudgateway
    restart: on-failure
    ports:
      - '8090:8090'
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservice-network

  inventory_service:
    build:
      context: ./InventoryService
      dockerfile: Dockerfile
    container_name: inventory-service
    restart: on-failure
    ports:
      - '5001:5001'
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservice-network

networks:
  microservice-network:
    driver: bridge